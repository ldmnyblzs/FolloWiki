\documentclass[a4paper]{report}

\usepackage[magyar]{babel}
\usepackage[utf8x]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{fullpage}
\usepackage{tabulary}
\usepackage{booktabs}

\title{%
  FolloWiki \\
  \large Rendszerterv}
\author{Bogáncs Dániel Sándor \\ (H6K1XW) \and Ludmány Balázs \\ (ZG85W7)}


\begin{document}
\maketitle

\tableofcontents

\chapter{A rendszer célja}

\section{Feladatkiírás}

Az alkalmazás lehetővé teszi, hogy a felhasználók követhessék egy-egy Wikipédia-szócikk változásait. A felhasználó regisztrációt követően kiválaszthat szócikkeket, amelynek napi változásait az alkalmazás detektálja REST-en keresztül, és a felhasználót e-mailben értesíti. A legapróbb változtatásokról -- például egy elgépelés kijavítása -- a szerver nem küld értesítőt.

\section{Tipikus funkciók}

\begin{description}
\item[Bejelentkeztetés] A felhasználók más weboldalakon használt felhasználói fiókjaikkal lépnek be az alkalmazás használatához (elsősorban Wikipédia account, de a bővítés lehetősége fennáll majd pl. Facebook, BME Címtár, stb. használatára is.)
\item[Szócikkek követése]
  \begin{description}
  \item[]
  \item[Nyilvántartás] Az alkalmazás a saját adatbázisában tárolja a figyelendő Wikipédia-szócikkek elérhetőségét és hogy mely felhasználók szeretnének a változásaikról értesítést kapni. Minden felhasználó hozzáadhat saját listájához új szócikket tetszőleges számban, vagy eltávolíthat már meglévőket (szükség esetén a feliratkozások száma korlátozható).
  \item[Beállítások]
    \begin{description}
    \item[]
    \item[Értesítési gyakoriság] Választhat meghatározott értesítési gyakoriságok közül (pl.: tíz percenként, óránként, naponta, hetente, havonta)
    \item[Szűrőfeltétel] A változás mértékére és helyésre is megkötéseket tehet. Kérhető, hogy párszavas vagy a szócikk egy adott szakaszán kívül eső változásokról ne értesítsen az alkalmazás.
    \end{description}
  \item[Detektálás] Az alkalmazás az összes figyelt szócikket ütemezetten átnézi, detektálja a változásokat, és a megadott beállítások alapján dönt az értesítés lementéséről az érintett felhasználó fiókjában.
  \item[Értesítések küldése] Az alkalmazás ütemezetten végignézi az összes felhasználót, és ha talál lementett kiküldendő értesítéseket, azokat összefűzi egy email-be, és eljuttatja a felhasználó címére.
  \end{description}
\end{description}

\section{Programkörnyezet}

A szoftver egy \emph{Java Platform, Enterprise Edition (Java EE)}-re épülõ webes alkalmazás. A külsõ komponensekkel a beépített absztrakciós rétegeken keresztül fog kommunikálni. Az adatbázis elérése \emph{Java Persistence API (JPA)}, a Wikipédia API-jának elérése REST kérésekkel \emph{Java API for RESTful Web Services (JAX-RS)} használatával fog történni. A program minden olyan rendszeren futni fog, amiket ezek támogatnak.

\chapter{Megvalósítás}

\section{Architektúra}

Az alkalmazásnak három klasszikusan elkülöníthető rétege van.
% 3 réteg de 5 elem a listában?
%\begin{description}
%\item[Adatbázis] Az entitásokat tárolja.
%\item[Adathozzáférési réteg] Minden entitáshoz tartozik egy osztály, ami a hozzáférést szabályozza, illetve adatmanipuláló funkciókat nyújt.
%\item[Logikai réteg] Ütemezett feladatokat végzõ komponensek működnek ezen a rétegen.
%\item[Felhasználói felület] Webes felület, amin keresztül elérhetőek az alkalmazás funkciói.
%\item[Egyéb] Léteznek további segédosztályok, amik a rétegeknek működést segítő szeparált szolgáltatásokat nyújtanak.
%\end{description}

% ÁBRA

\subsection{Adatbázis-kezelés}

Az adatbázis struktúráját absztrakt módon kezeljük. Java Persistence API használatával nem szükséges adatbázistáblák definiálása, mert közvetlenül a Java objektumokat perzisztáljuk. Ezzel a módszerrel hatékonyabb adatelérés áll majd rendelkezésre oly módon, hogy nem kell az objektumok közötti referenciák megtartására időt fordítanunk, mivel ezt a JPA megteszi helyettünk.

A megvalósított feladatunk hatalmas továbbfejlesztési potenciállal rendelkezik. A JavaEE lehetõséget ad, hogy az alkalmazásunkat elosztottá tegyük. Ennek megfelelően ahol csak lehet állapotmentes \emph{JavaBean} osztályokat használunk, minden állapottal rendelkezõ osztályt entitásként kezelünk, és használatkor közvetlen az adatbázisból kérdezünk le. Az entitások betöltése az alkalmazás indulásakor nagy mértékben gyorsítaná a rendszert további mûködését, de elosztott esetben könnyen inkonzisztensé válhatnak az adatok. Cache használatától ezen okból eltekintünk. A megfontolások alapján az alkalmazásban használt entitásokat \aref{sec:entities}. szakaszban, az adathozzáférést biztosító osztályokat pedig \aref{sec:data_handlers} szakaszban részletezzük.

\subsection{Üzleti logika}

Az alkalmazásban nagy szerepe van a logikai rétegnek. A feladat megoldásához elengedhetetlen két ütemezetten működő modul. Az egyik a Wikipéda-cikkek változásainak lekérdezését, a másik az ezeket tartalmazó összesítő üzenetek kiküldését végzi.

Az alkalmazásban újrafelhasználhatóség érdekében fontos szempont volt a kohézió csökkentése. Vannak olyan funkciócsoportok, amik bizonyos szempontok szerint összetartoznak, ugyanakkor az alkalmazásban több helyen is felhasználhatóak. Ezek a funkciók lehetõség szerint külön osztályokba vannak kiszervezve. Ezekkel \aref{sec:logic}. szakaszban foglalkozunk részletesebben.

\subsection{Grafikus felület}

\section{Entitások}
\label{sec:entities}

Az adatok konzisztenciájának megőrzése érdekében az osztályok állapotai lementésre kerülnek az adatbázisba. Annak érdekében, hogy az alkalmazás legnagyobb része statikusan tudjon működni, minden állapot entitás osztályokra korlátozódik. Ezen állapotok pusztán a felhasználók, cikkek és feliratkozások objektumait jelentik. Ezeket az alkalmazás rendszeresen szinkronizálja az adatbázissal, minden egyéb osztály állapotfüggetlen.

% \subsection{ER diagram}

% ÁBRA

\subsection{User}

Amennyiben a felhasználó a mi alkalmazásunkban akar fiókot létrehozni, van rá lehetősége. Ehhez meg kell adnia az adatait, amik egy közös objektumként kerülnek tárolásra. Felhasználónév, jelszó, email cím és egyéb kiegészítő felhasználói adatokon túl tartalmaz egy buffer-t, amibe a követett szócikkek változásainak a referenciái kerülnek.

Ha külső fiókkal jelentkezik be, az alkalmazás azt is absztrakt módon képes kezelni. Ebben az esetben az entitás adatai nem az adatbázisból, hanem a külső szolgáltatótól származnak.

\begin{table}[ht]
  \centering
  \begin{tabulary}{\linewidth}{llL} 
    \toprule
    Név & Típus & Jelentés \\
    \midrule
    username & \verb|String| & Felhasználó neve \\ 
    pwHash & \verb|String| & Felhasználó jelszava elkódolva \\
    email & \verb|String| & Felhasználó értesítési email címe \\
    notifications & \verb|List<String>| & Lista azokról felhasználót érintõ releváns változásokról, amik még nem lettek email-ben kiküldve \\
    \bottomrule
  \end{tabulary}
  \caption{A User egyedhalmaz attribútumai}
  \label{tab:user_entity}
\end{table}

\subsection{Article}

Szócikk entitás, ami tartalmazza a Wikipédia oldal URL címét. Rendelkezik egy buffer-rel, amibe az adott cikkhez tartozó legutóbbi releváns változások kerülnek lementésre.

\begin{table}[ht]
  \centering
  \begin{tabulary}{\linewidth}{llL} 
    \toprule
    Név & Típus & Jelentés \\
    \midrule
    url & \verb|String| & Wikipéda-cikk elérési útja \\ 
    differences & \verb|List<String>| & Wikipéda-cikk releváns változásai \\ 
    \bottomrule
  \end{tabulary}
  \caption{Az Article egyedhalmaz attribútumai}
  \label{tab:article}
\end{table}

\subsection{Subscribe}

A felhasználók feliratkozhatnak cikkek követésére, és különbözõ beállításokat alkalmaznak. Szükség van ezért egy kapcsolatra, ami tárolja ezeket a beállításokat a felhasználó - szócikk pároshoz

\begin{table}[ht]
  \centering
  \begin{tabulary}{\linewidth}{llL} 
    \toprule
    Név & Típus & Jelentés \\
    \midrule
    user & \verb|User| & Referencia az õt létrehozó felhasználó entitásra \\ 
    article & \verb|Article| & Referencia a cikk entitásra, amire a beállítások vonatkoznak \\ 
    frequency & \verb|TimeSpan| & Értesítési gyakoriság \\ 
    sensitivity & \verb|int| & Érzékenységi skála a változásokra (minimum: új alfejezet, maximum: betûátírás) \\ 
    \bottomrule
  \end{tabulary}
  \caption{A Subscribe kapcsolattípus attribútumai}
  \label{tab:subscribe_connection}
\end{table}

\section{Adatkezelő osztályok}
\label{sec:data_handlers}

A felelősségek megfelelő elosztása érdekében minden olyan metódus, ami csak az entitások manipulálásával foglalkozik (CRUD műveletek), és nem tartozik szorosan az alkalazás logikájához, az külön osztályban kerül megvalósításra.

\subsection{UserManager}

Lehetõséget biztosít a felhasználók kezelésére. Képes helyi felhasználói fiókot is létrehozni, de képes bejelentkeztetni akár már meglévő Wikipédia fiókkal is (és tetszőleges számban bővíthető tovább például Facebook felhasználói fiókra).

\begin{table}[ht]
  \centering
  \begin{tabulary}{\linewidth}{llL} 
    \toprule
    Függvénynév & Típus & Jelentés \\
    \midrule
    \verb|loginUser| & \verb|boolean| & Megadott adatokkal bejelentkezteti a felhasználót az átadott paraméternek megfelelõen \\ 
    \verb|createUser| & \verb|boolean| & Új felhasználót hoz létre \\ 
    \bottomrule
  \end{tabulary}
  \caption{A UserManager osztály metódusai}
  \label{tab:UserManager_class}
\end{table}

\subsection{SubscribeManager}

Követések kezelését végző osztály, rendelkezik a Subscribe entitások kezeléséhez szükséges metódusokkal.

\begin{table}[ht]
  \centering
  \begin{tabulary}{\linewidth}{llL} 
    \toprule
    Függvénynév & Típus & Jelentés \\
    \midrule
    \verb|createSubscribe| & \verb|boolean| & Új feliratkozást hoz létre illetve magát a cikket, ha az adott URL még nem létezik az adatbázisban \\
    \verb|getAllSubscribeByArticle| & \verb|List<Subscribe>| & Visszaadja adott cikkhez az összes feliratkozást \\
    \verb|getAllSubscribeByUser| & \verb|List<Subscribe>| & Visszaadja adott felhasználóhoz az összes feliratkozását \\ 
    \bottomrule
  \end{tabulary}
  \caption{A SubscribeManager osztály metódusai}
  \label{tab:SubscribeManager_class}
\end{table}

\section{Logikai komponensek}
\label{sec:logic}

% \subsection{Objektummodell}

% ÁBRA

\subsection{UserManager}

Felhasználók kezeléséért felelős osztály. Metódusai lehetőséget biztosítanak a bejelentkezésre. A bemenő paraméter alapján képes önállóan kiválasztani a bejelentkezési módot (lokális, Wikipédia, Facebook... stb.).

\begin{table}[ht]
  \centering
  \begin{tabulary}{\linewidth}{llL} 
    \toprule
    Függvénynév & Típus & Jelentés \\
    \midrule
    \verb|loginUser| & \verb|boolean| & Megadott adatokkal bejelentkezteti a felhasználót \\ 
    \verb|createUser| & \verb|boolean| & Új felhasználót hoz létre \\ 
    \bottomrule
  \end{tabulary}
  \caption{A UserManager osztály metódusai}
  \label{tab:UserManager_class}
\end{table}

\subsection{Differentiator}

Az alkalmazás motorja. Ez a differenciáló osztály kérdezi le a Wikipédiától a követett szócikkek módosulásait, és a beállítások alapján dönt róla, hogy relevánsok-e. Metódusai az ehhez szükséges algoritmusokat tartalmazzák. Referenciája van az ArticleManager objektumra, ahonnan lekérdezheti a követett cikkek listáját, illetve, ha egy cikknél válozást észlel, képes a manager-en keresztül elérni a cikk és a felhasználók bufferét is, ahova elmenti a releváns változások referenciáját. Ezt a műveletet ütemezetten végzi minimális értesítési gyakorisággal.

\begin{table}[ht]
  \centering
  \begin{tabulary}{\linewidth}{llL} 
    \toprule
    Függvényév & Típus & Jelentés \\
    \midrule
    \verb|loginUser| & \verb|boolean| & Megadott adatokkal bejelentkezteti a felhasználót \\ 
    \verb|createUser| & \verb|boolean| & Új felhasználót hoz létre \\
    \bottomrule
  \end{tabulary}
  \caption{A Differentiator osztály metódusai}
  \label{tab:Differeitiator_class}
\end{table}

\subsection{CommunicationManager}

Több eset is előfordul, amikor a szervernek külsõ komponenssel kell kommunikálnia, például egy Wikipédia fiókkal történő bejelentkeztetés során, vagy egy adott cikk változásainak a lekérdezésekor. Az alkalmazás ezeket REST-es hívásokkal kezeli. A REST-es kommunikáció lebonyolításáért ez az osztály felelős minden esetben.

\begin{table}[ht]
  \centering
  \begin{tabulary}{\linewidth}{llL} 
    \toprule
    Függvényév & Típus & Jelentés \\
    \midrule
    \verb|doGet| & \verb|String| & GET üzenet küldése \\ 
    \verb|doPost| & \verb|String| & POST üzenet küldése \\ 
    \bottomrule
  \end{tabulary}
  \caption{A CommunicationManager osztály metódusai}
  \label{tab:CommunicationManager_class}
\end{table}

\subsection{WikiModule}

A Wikipédia API az alkalmazásunk szempontjából hasznos metódusokat publikál, amiket REST-es kérésekkel lehet elérni. Ez a komponens a CommunicationManager használatával elfedi REST kéréseket, és wrapper-ként java metódusokon keresztül szolgáltatja a funkcionalitásokat a többi osztály felé.
 \begin{table}[ht]
  \centering
  \begin{tabulary}{\linewidth}{llL} 
    \toprule
    Függvényév & Típus & Jelentés \\ [0.5ex] 
    \midrule
    \verb|getDifferences| & \verb|List<String>| & Egy cikkhez visszaadja a változásokat \\ 
    \hline
    \verb|login| & \verb|String| & Wikipédián keresztül bejelentkezteti a felhasználót \\ 
    \bottomrule
  \end{tabulary}
  \caption{A WikiModule osztály metódusai}
  \label{tab:WikiModule_class}
\end{table}

\section{GUI}

\chapter{Telepítési útmutató}

\chapter{Használt eszközök}

\chapter{Összefoglalás}

\end{document}
