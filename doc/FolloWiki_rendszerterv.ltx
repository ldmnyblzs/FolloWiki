\documentclass[a4paper, 12pt]{report}

\usepackage[magyar]{babel}
\usepackage[utf8x]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{fullpage}
\usepackage{tabulary}
\usepackage{booktabs}
\usepackage{xcolor}
\usepackage{listings}
\lstset{basicstyle=\ttfamily,
  columns=fullflexible,
  showspaces=false,
  showstringspaces=false,
  commentstyle=\color{red},
  keywordstyle=\color{blue},
  breaklines=true
}
\usepackage{graphicx}
\usepackage{float}

\graphicspath{{images/}}

\title{%
  FolloWiki \\
  \large Rendszerterv}
\author{Bogáncs Dániel Sándor \\ (H6K1XW) \and Ludmány Balázs \\ (ZG85W7)}


\begin{document}
\maketitle

\tableofcontents

\chapter{A rendszer célja}

\section{Feladatkiírás}

Az alkalmazás lehetővé teszi, hogy a felhasználók követhessék egy-egy Wikipédia-szócikk változásait. A felhasználó regisztrációt követően kiválaszthat szócikkeket, amelynek napi változásait az alkalmazás detektálja REST-en keresztül, és a felhasználót e-mailben értesíti. A  legapróbb változtatásokról -- például egy elgépelés kijavítása -- a szerver nem küld értesítőt.

\section{Tipikus funkciók}

\begin{description}
\item[Bejelentkeztetés] A felhasználók más weboldalakon használt felhasználói fiókjaikkal lépnek be az alkalmazás használatához (elsősorban Wikipédia account, de a bővítés lehetősége fennáll majd pl. Facebook, BME Címtár, stb. használatára is.)
\item[Szócikkek követése]
  \begin{description}
  \item[]
  \item[Nyilvántartás] Az alkalmazás a saját adatbázisában tárolja a figyelendő Wikipédia-szócikkek elérhetőségét és hogy mely felhasználók szeretnének a változásaikról értesítést kapni. Minden felhasználó hozzáadhat saját listájához új szócikket tetszőleges számban, vagy eltávolíthat már meglévőket (szükség esetén a feliratkozások száma korlátozható).
  \item[Beállítások]
    \begin{description}
    \item[]
    \item[Értesítési gyakoriság] Választhat meghatározott értesítési gyakoriságok közül (pl.: tizenöt percenként, óránként, naponta, hetente, havonta)
    \item[Szűrőfeltétel] A változás mértékére és helyésre is megkötéseket tehet. Kérhető, hogy párszavas vagy a szócikk egy adott szakaszán kívül eső változásokról ne értesítsen az alkalmazás.
    \end{description}
  \item[Detektálás] Az alkalmazás az összes figyelt szócikket ütemezetten átnézi, detektálja a változásokat, és a megadott beállítások alapján dönt az értesítés lementéséről az érintett felhasználó fiókjában.
  \item[Értesítések küldése] Az alkalmazás ütemezetten végignézi az összes felhasználót, és ha talál lementett kiküldendő értesítéseket, azokat összefűzi egy email-be, és eljuttatja a felhasználó címére.
  \end{description}
\end{description}

\section{Programkörnyezet}

A feladat megvalósítására egy vékonykliens alkalmazás a legmegfelelőbb könnyű használhatóság szempontjából. A felhasználó számára a legkönnyebb, ha webes felületen keresztül érheti el a szolgáltatást. Ennek megfelelően a szoftver egy többrétegű webes alkalmazás. Személyes ismereteink alapján a Java nyelvet választottuk a fejlesztéshez, és az architektúrának megfelelően igénybe vesszük a \emph{Java Platform, Enterprise Edition (Java EE)} biztosította lehetőségeket. A weboldalak XHTML formátumú Java Server Faces oldalak lesznek, amik mögött szerveroldalon JavaBean-ek fogják a logikát biztosítani. A webszerveren és az adatbázisszerveren is Glassfish fog futni. Az adatbázis kezelését \emph{Java Persistence API}-t (\emph{JPA}-t) használálunk. A külsõ komponensekkel a beépített absztrakciós rétegeken keresztül fog kommunikálni. A Wikipédia API-jának elérése REST kérésekkel \emph{Java API for RESTful Web Services (JAX-RS)} használatával fog történni. A program minden olyan rendszeren futni fog, amiket a felsorolt technológiák támogatnak.

\chapter{Megvalósítás}

\section{Architektúra}

Az alkalmazásnak négy klasszikusan elkülöníthető rétege van.

\begin{description}
\item[Adatbázis]Az alkalmazás alapját az entitások képezik. A felhasználókat, a cikkeket... stb. entitások testesítik meg, amiket adatbázisban tárolunk. A réteg elkülönítésével lehetőségünk nyílik, hogy több alkalmazás is ugyanazokhoz az entitásokhoz férhessen hozzá.
\item[Adathozzáférési réteg] A legtöbb entitáshoz tartozik egy osztály, ami a hozzáférést szabályozza, illetve adatmanipuláló funkciókat nyújt a felsőbb rétegeknek. Az adatbázis konzisztenciájának megtartásához kötelező az adathozzáférési réteg használata.
\item[Logikai réteg] Két feladatkörrel foglalkozik logikai réteg, amik ugyan elszeparálhatóak, de nem épülnek egymásra. Az egyik csoportba az ütemezett feladatok ellátásáért felelős osztályok, a másikba klasszikus JavaBean-ek tartoznak.
\begin{description}
\item[Ütemezők]
A releváns változásokat detektáló és értesítést kiküldő osztályok, amik beállított időközönként automatikusan lefutnak.
\item[Beans]
Klasszikus JavaBean-ek, amik a weboldalak számára megjelenítendő adatokat biztosítanak, továbbá minden weboldalon kezdeményezett műveletet a Bean-ek kezelnek.
\item[Egyéb] Léteznek további segédosztályok, amik működést segítő szeparált szolgáltatásokat nyújtanak.
\end{description}
\item[Felhasználói felület] Java Server Faces Webes felület, amin keresztül elérhetőek az alkalmazás funkciói.
\end{description}

% ÁBRA

\subsection{Adatbázis-kezelés}

Az adatbázis struktúráját absztrakt módon kezeljük. Java Persistence API használatával nem szükséges adatbázistáblák definiálása, mert közvetlenül a Java objektumokat perzisztáljuk. Ezzel a módszerrel hatékonyabb adatelérés áll majd rendelkezésre oly módon, hogy nem kell az objektumok közötti referenciák megtartására időt fordítanunk, mivel ezt a JPA megteszi helyettünk.

A megvalósított feladatunk hatalmas továbbfejlesztési potenciállal rendelkezik. A JavaEE lehetõséget ad, hogy az alkalmazásunkat elosztottá tegyük. Ennek megfelelően ahol csak lehet állapotmentes \emph{JavaBean} osztályokat használunk, minden állapottal rendelkezõ osztályt entitásként kezelünk, és használatkor közvetlen az adatbázisból kérdezünk le. Az entitások betöltése az alkalmazás indulásakor nagy mértékben gyorsítaná a rendszert további mûködését, de elosztott esetben könnyen inkonzisztensé válhatnak az adatok. Cache használatától ezen okból eltekintünk. A megfontolások alapján az alkalmazásban használt entitásokat \aref{sec:entities}. szakaszban, az adathozzáférést biztosító osztályokat pedig \aref{sec:data_handlers} szakaszban részletezzük.

\subsection{Üzleti logika}

Az alkalmazásban nagy szerepe van a logikai rétegnek. A feladat megoldásához elengedhetetlen két ütemezetten működő modul. Az egyik a Wikipéda-cikkek változásainak lekérdezését, a másik az ezeket tartalmazó összesítő üzenetek kiküldését végzi.

Az alkalmazásban újrafelhasználhatóség érdekében fontos szempont volt a kohézió csökkentése. Vannak olyan funkciócsoportok, amik bizonyos szempontok szerint összetartoznak, ugyanakkor az alkalmazásban több helyen is felhasználhatóak. Ezek a funkciók lehetõség szerint külön osztályokba vannak kiszervezve. Ezekkel \aref{sec:logic}. szakaszban foglalkozunk részletesebben.

\subsection{Grafikus felület}

A felhasználó számára egy egyszerű webes felület áll rendelkezésre, ahol be tud jelentkezni és el tudja végezni a fontosabb beállításokat. Ezek alapján két csoportba soroljuk a weboldalakat: Felhasználók és feliratkozások kezelői.

\begin{description}
\item[Felhasználó-kezelés]
Funkcionalitások tekintetében a felület lehetőséget biztosít a felhasználónak, hogy beléphessen vagy regisztrálhasson, illetve ki tudja választani, hogy ezeket a műveleteket milyen típusú fiókkal szeretnék elvégezni.
\item[Feliratkozás-kezelés]
Bejelentkezés után a felhasználó a feliratkozásait kezelheti: hozhat létre újat, törölhet vagy módosíthat meglévőt, és listába szedve láthatja az összes feliratkozást.
\end{description}
A felület minimális formázást is tartalmaz a Wikipédiához hasonló színvilággal.

\section{Entitások}
\label{sec:entities}

Az adatok konzisztenciájának megőrzéséhez az osztályok állapotai lementésre kerülnek az adatbázisba. Annak érdekében, hogy az alkalmazás legnagyobb része statikusan tudjon működni, minden állapot entitás osztályokra korlátozódik. Ezen állapotok pusztán a felhasználók, cikkek és feliratkozások objektumait jelentik. Ezeket az alkalmazás rendszeresen szinkronizálja az adatbázissal, minden egyéb osztály állapotfüggetlen.

% \subsection{ER diagram}

% ÁBRA

\subsection{User}

Amennyiben a felhasználó a mi alkalmazásunkban akar fiókot létrehozni, van rá lehetősége. Ehhez meg kell adnia az adatait, amik egy közös objektumként kerülnek tárolásra. Felhasználónév, jelszó, email cím és egyéb kiegészítő felhasználói adatokon túl tartalmaz egy buffer-t, amibe a követett szócikkek változásainak a referenciái kerülnek.

Ha külső fiókkal jelentkezik be, az alkalmazás azt is absztrakt módon képes kezelni. Ebben az esetben az entitás adatai nem az adatbázisból, hanem a külső szolgáltatótól származnak.

\begin{table}[H]
  \centering
  \begin{tabulary}{\linewidth}{llL} 
    \toprule
    Név & Típus & Jelentés \\
    \midrule
    username & \verb|String| & Felhasználó neve \\ 
    pwHash & \verb|String| & Felhasználó jelszava elkódolva \\
    email & \verb|String| & Felhasználó értesítési email címe \\
    role & \verb|String| & Felhasználói szerepkör (jelenleg nincs használatban) \\
    notifications & \verb|List<Notification>| & Lista azokról felhasználót érintõ releváns változásokról, amik még nem lettek email-ben kiküldve \\
    \bottomrule
  \end{tabulary}
  \caption{A User egyedhalmaz attribútumai}
  \label{tab:user_entity}
\end{table}

\subsection{Article}

Szócikk entitás, ami tartalmazza a Wikipédia oldal URL címét. Rendelkezik egy buffer-rel, amibe az adott cikkhez tartozó legutóbbi releváns változások kerülnek lementésre.

\begin{table}[H]
  \centering
  \begin{tabulary}{\linewidth}{llL} 
    \toprule
    Név & Típus & Jelentés \\
    \midrule
    url & \verb|String| & Wikipéda-cikk elérési útja \\ 
    differences & \verb|List<Notification>| & Wikipéda-cikk releváns változásai \\ 
    \bottomrule
  \end{tabulary}
  \caption{Az Article egyedhalmaz attribútumai}
  \label{tab:article}
\end{table}

\subsection{Subscribe}

A felhasználók feliratkozhatnak cikkek követésére, és különbözõ beállításokat alkalmaznak. Szükség van ezért egy kapcsolatra, ami tárolja ezeket a beállításokat a felhasználó - szócikk pároshoz.

\begin{table}[H]
  \centering
  \begin{tabulary}{\linewidth}{llL} 
    \toprule
    Név & Típus & Jelentés \\
    \midrule
    user & \verb|User| & Referencia az õt létrehozó felhasználó entitásra \\ 
    article & \verb|Article| & Referencia a cikk entitásra, amire a beállítások vonatkoznak \\ 
    frequency & \verb|int| & Értesítési gyakoriság (percekben)\\ 
    sensitivity & \verb|int| & Érzékenységi skála a változásokra (jelenleg karakterszámot lehet megadni) \\ 
    \bottomrule
  \end{tabulary}
  \caption{A Subscribe kapcsolattípus attribútumai}
  \label{tab:subscribe_connection}
\end{table}

\subsection{Notification}

A detektált változások Notification objektumként kerülnek tárolásra. Attribútumaiban tárolásra kerülnek a változással kapcsolatos fontosabb adatok. Ez mindig tárolásra kerül a megváltozott cikk (Article) entitás differences listájában, és az érintett felhasználók (User) notifications listájában is.

\begin{table}[H]
  \centering
  \begin{tabulary}{\linewidth}{llL} 
    \toprule
    Név & Típus & Jelentés \\
    \midrule
    date & \verb|Date| & Változás dátuma \\ 
    comment & \verb|String| & A cikket módosító személyes megjegyzése \\ 
    url & \verb|String| & A cikk url-je\\ 
    title & \verb|String| & A cikk címe \\ 
    \bottomrule
  \end{tabulary}
  \caption{A Subscribe kapcsolattípus attribútumai}
  \label{tab:subscribe_connection}
\end{table}

\section{Adatkezelő osztályok}
\label{sec:data_handlers}

A felelősségek megfelelő elosztása érdekében minden olyan metódus, ami csak az entitások manipulálásával foglalkozik (CRUD műveletek), és nem tartozik szorosan az alkalazás logikájához, az külön osztályban kerül megvalósításra.

\subsection{UserManager}

Lehetõséget biztosít a felhasználók kezelésére. Képes helyi felhasználói fiókot is létrehozni, de képes bejelentkeztetni akár már meglévő Wikipédia fiókkal is (és tetszőleges számban bővíthető tovább például Facebook felhasználói fiókra). Implementálja az IAccountManager interfészt a helyi bejelentkezéshez.

\begin{table}[H]
  \centering
  \begin{tabulary}{\linewidth}{llL} 
    \toprule
    Függvénynév & Típus & Jelentés \\
    \midrule
    \verb|createUser| & \verb|User| & Új felhasználót hoz létre \\ 
    \verb|deleteUser| & \verb|void| & Törli a felhasználót \\ 
    \verb|updateUser| & \verb|void| & Módosítja a felhasználót \\ 
    \verb|getAllUser| & \verb|List<User>| & Visszaadja az összes felhasználót \\ 
    \verb|getUserByUsername| & \verb|User| & Visszaadja a felhasználó objektumot egy adott névvel \\ 
    \verb|getUserById| & \verb|User| & Visszaadja a felhasználó objektumot egy adott azonosító lapján \\ 
    \bottomrule
  \end{tabulary}
  \caption{A UserManager osztály metódusai}
  \label{tab:UserManager_class}
\end{table}

\subsection{SubscribeManager}

A SubscribeManager alapvetően a feliratkozások (Subscribe) kezeléséért felelős. Ezek az objektumok azonban kapcsolatot teremtenek a felhasználókkal (User) és a cikkekkel (Article) is, ezért különböző lekérdezési lehetőségek vannak felhasználókra és cikkekre, amire önmagában a UserManager vagy az ArticleManager nem lenne képes. Ez az osztály felelős azért is, hogy a Notification objektumokat konziosztens állapotban tartsa, vagyis hogy az Article objektumoknál lementett változások (Notification) bekerüljenek az érintett felhasználó notifications lisájába is.

\begin{table}[H]
  \centering
  \begin{tabulary}{\linewidth}{llL} 
    \toprule
    Függvénynév & Típus & Jelentés \\
    \midrule
    \verb|createSubscribe| & \verb|Subscribe| & Új feliratkozást hoz létre \\
    \verb|deleteSubscribe| & \verb|void| & Feliratkozást töröl \\
    \verb|updateSubscribe| & \verb|void| & Feliratkozást módosít \\
    \verb|getSubscribeById| & \verb|Subscribe| & Feliratkozás lekérdezése azonosító alapján \\
    \verb|getAllSubscribeByArticle| & \verb|List<Subscribe>| & Feliratkozások lekérdezése adott cikkre vonatkozóan \\
    \verb|getAllSubscribeByUserId| & \verb|List<Subscribe>| & Feliratkozások lekérdezése feliratkozott felhasználó azonosítója alapján \\ 
    \verb|getAllSubscribeByUserIdAndUrl| & \verb|List<Subscribe>| & Feliratkozás lekérdezése adott cikkre és adott felhasználóra vonatkozóan \\ 
    \verb|getAllArticleUrl| & \verb|List<String>| & Visszaadja az összes egyedi URL-t azokhoz a cikkekhez, amikre feliratkoztak \\
    \verb|getAllSubscribedUserByArticle| & \verb|List<User>| & Visszaadja azokat a felhasználókat, akik adott cikkre feliratkoztak \\
    \verb|saveNotification| & \verb|void| & Összetett mentést végez, ami során az észlelt különbséget elmenti az adott cikk számára, és az összes feliratkozott felhasználóhoz is külön-külön, aki számára az adott változás releváns \\
    \bottomrule
  \end{tabulary}
  \caption{A SubscribeManager osztály metódusai}
  \label{tab:SubscribeManager_class}
\end{table}

\section{Logikai komponensek}
\label{sec:logic}

% \subsection{Objektummodell}

% ÁBRA

\subsection{UserManager}

Felhasználók kezeléséért felelős osztály. Metódusai lehetőséget biztosítanak a bejelentkezésre. A bemenő paraméter alapján képes önállóan kiválasztani a bejelentkezési módot (lokális, Wikipédia, Facebook... stb.).

\begin{table}[H]
  \centering
  \begin{tabulary}{\linewidth}{llL} 
    \toprule
    Függvénynév & Típus & Jelentés \\
    \midrule
    \verb|loginUser| & \verb|boolean| & Megadott adatokkal bejelentkezteti a felhasználót \\ 
    \verb|createUser| & \verb|boolean| & Új felhasználót hoz létre \\ 
    \bottomrule
  \end{tabulary}
  \caption{A UserManager osztály metódusai}
  \label{tab:UserManager_class}
\end{table}

% Úgy látom ez nem lett használva

%\subsection{Differentiator}

%Az alkalmazás motorja. Ez a differenciáló osztály kérdezi le a Wikipédiától a követett szócikkek módosulásait, és a beállítások alapján dönt róla, hogy relevánsok-e. Metódusai az ehhez szükséges algoritmusokat tartalmazzák. Referenciája van az ArticleManager objektumra, ahonnan lekérdezheti a követett cikkek listáját, illetve, ha egy cikknél válozást észlel, képes a manager-en keresztül elérni a cikk és a felhasználók bufferét is, ahova elmenti a releváns változások referenciáját. Ezt a műveletet ütemezetten végzi minimális értesítési gyakorisággal.

%\begin{table}[ht]
%  \centering
%  \begin{tabulary}{\linewidth}{llL} 
%    \toprule
%    Függvényév & Típus & Jelentés \\
%    \midrule
%    \verb|loginUser| & \verb|boolean| & Megadott adatokkal bejelentkezteti a felhasználót \\ 
%    \verb|createUser| & \verb|boolean| & Új felhasználót hoz létre \\
%    \bottomrule
%  \end{tabulary}
%  \caption{A Differentiator osztály metódusai}
%  \label{tab:Differeitiator_class}
%\end{table}

% Meg ez se..

%\subsection{CommunicationManager}

%Több eset is előfordul, amikor a szervernek külsõ komponenssel kell kommunikálnia, például egy Wikipédia fiókkal történő bejelentkeztetés során, vagy egy adott cikk változásainak a lekérdezésekor. Az alkalmazás ezeket REST-es hívásokkal kezeli. A REST-es kommunikáció lebonyolításáért ez az osztály felelős minden esetben.

%\begin{table}[ht]
%  \centering
%  \begin{tabulary}{\linewidth}{llL} 
%    \toprule
%    Függvényév & Típus & Jelentés \\
%    \midrule
%    \verb|doGet| & \verb|String| & GET üzenet küldése \\ 
%    \verb|doPost| & \verb|String| & POST üzenet küldése \\ 
%    \bottomrule
%  \end{tabulary}
%  \caption{A CommunicationManager osztály metódusai}
%  \label{tab:CommunicationManager_class}
%\end{table}

% Ezt meg majd megírod te

\subsection{WikiModule}

A Wikipédia szócikkekről rengeteg információt le lehet kérni egy REST alapú interfészen keresztül. Ezek közé tartoznak a változások is, amiket a programunkban felhasználtunk. 

A ``hagyományos'' Wikipédia URL-ekben az elérési út része a kért oldal. Az API kéréseinket viszont mindig a \verb!/w/api.php!-hoz kell intéznünk, és query paramétereken keresztül finomíthatjuk a szűrést.

A FolloWiki negyedórás intervallumokban kéri le a változásokat a figyelt cikkekről. Mivel az összes oldal bejárása jelentős időt vehet igénybe -- ami a szerver egyéb terhelésétől függően akár váltakozhat is -- a változásokat mindig csak az első kérés időpontjáig kérjük le. Az, hogy egy oldal később kerül sorra, nem jelentheti azt, hogy róla már egy ennyivel nagyobb intervallumba eső változásokat kérünk le.

A kommunikációt a JAX-RS absztrakciós rétegen keresztül végezzük, ami elfedi a REST hívások konkrét implementációját. A visszaérkező adatokat JAXB segítségével dolgozzuk fel, ami az XML vagy JSON szövegből megfelelően annotált osztályok példányait állítja elő automatikusan. Ezzel a fajta leképezéssel sajnos nem lehet minden valid JSON dokumentumot leírni, és ebbe a kategóriába tartoznak a Wikipédia válaszüzenetei is. Ha viszont XML-t kérünk, azt nagyszerűen fel tudja dolgozni a könyvtár.

 \begin{table}[H]
  \centering
  \begin{tabulary}{\linewidth}{llL} 
    \toprule
    Függvényév & Típus & Jelentés \\ [0.5ex] 
    \midrule
    \verb|getRevisions| & \verb|Page| & Visszaadja egy URL-hez az adott oldal változásait tartalmazó objektumot\\
    \bottomrule
  \end{tabulary}
  \caption{A WikiModule osztály metódusai}
  \label{tab:WikiModule_class}
\end{table}

\section{GUI}

% Ide be kellene szúrni pár screenshotot 
Az alkalmazás funkciói hat weboldallal lettek megvalósítva.

\subsection{Weboldalak}

\begin{description}
\item[Fiókválasztó (index.xhtml)]
Beállítások szerint a felhasználót az alkalmazás rögön erre az oldalra irányítja. Gombnyomással választhat, hogy milyen típusú fiókkal szeretne belépni. Jelenleg ezek a gombok többsége nem aktív, de az alkalmazás fejlesztésével a helyi bejelentkezésen túl további lehetőségeket is biztosítan lehet.
\item[Bejelentkező felület (login.xhtml)]
A bejelentkezéskor felhasználónév jelszó párost kell megadni. Amennyiben a bejelentkezés nem sikerül, a felhasználó hibaüzenetet kap. Erről az oldalról átléphetünk a regisztrációra.
\item[Regisztráció (createuser.xhtml)]
A regisztrációhoz adatokat kell megadni. Az ezekhez tartozó beviteli mező ellenőrzött, így mezőt üresen hagyni nem enged, a hiányzó értékek mellé piros csillagok kerülnek.
\item[Feliratkozások listája (control.xhtml)]
Sikeres bejelentkezés után a felhasználó megtekintheti az eddigi feliratkozásait. Minden feliratkozás külön sor, és mindegyik mellett található törlési és módosítási lehetőség.
\item[Új feliratkozás (sub.xhtml)]
Külön felületen lehet egy feliratkozást létrehozni. A bementetk ellenőrzöttek, így üresen hagyni nem lehet, illetve ha nem az érték típusának megfelelő karaktereket adunk be (például számokat), akkor a feliratkozás létrehozása nem lesz végrehajtva.
\item[Feliratkozás módosítása (edit.xhtml)] 
A létrehozáshoz hasonló felületen egy kiválasztott feliratkozást módosítani is lehet. A bemeneten ugyanazok megengedettek, mint létrehozáskor. Kivétel ez alól az URL, ami nem módosítható (hiszen az már egy "másik" feliratkozás lenne).
\end{description}

\subsection{Biztonság}

Az alkalmazás mérsékelt szinten a biztonságra is törekszik. A beviteli mezők típusra és ürességre mindig ellenőrzöttek. Az adatok csak konzisztens esetben kerülnek lementésre. Az entitások előre megfogalmazott NamedQuery lekérdezésekkel rendelkeznek, amik az esetleges értékeket paraméterként veszik át, így az SQL injection nem lehetésges.

Egyes oldalak megtekintéséhez authentikáció szükséges. Java Server Faces használatával a faces-config.xml fájlban a navigáció csak a konfigurációnak megfelelően lehetséges. Ha a felhasználó ugyan a szabályoknak megfelelően, de bejelentkezés nélkül akar egy védett oldalt megtekinteni, akkor azt a kérést a szerver elutasítja.

Ismert, hogy az oldalak nincsenek biztosítva cross-side-scripting ellen. Ez azonban csak minimális veszélyeket rejt, mivel minden felhasználó csak a maga által megadott adatokat láthatja. Ismert továbbá az is, hogy a beviteli mezők többsége kliensoldali, így annak a megkerülésével lehetőség nyílhat hibás meviteli értékek megadására.

\chapter{Telepítési útmutató}

Az útmutató egy Ubuntu 16.04-et futtató gépből indul ki, de kis módosításokkal más rendszereken is elvégezhetőek a lépések.

\begin{samepage}
Maga az oldal alapértelmezetten a 8080-as porton lesz elérhető, a szerver management portja pedig a 4848-as. Ezeket át kell engednünk az operációs rendszerben és a hálózaton lévő tűzfalakon.

\begin{lstlisting}[language=bash]
sudo ufw allow 4848/tcp
sudo ufw allow 8080/tcp
\end{lstlisting}
\end{samepage}

\begin{samepage}
Az útmutatóban használt Payara szerver sajnos nem érhető el a hivatalos szoftvertárolóból, ezért azt külön le kell töltenünk.

\begin{lstlisting}[language=bash]
wget https://s3-eu-west-1.amazonaws.com/payara.fish/Payara+Downloads/Payara+4.1.1.164/payara-4.1.1.164.zip
unzip payara-4.1.1.164.zip
\end{lstlisting}
\end{samepage}

\begin{samepage}
A többi függőség, mint az adatbázis szerver, a futtatókörnyezet vagy a fordításhoz használt eszközök elérhetők a megszokott csatornán keresztül is.

\begin{lstlisting}[language=bash]
sudo apt-get install mysql-server mysql-client libmysql-java openjdk-8-jdk maven git
\end{lstlisting}
\end{samepage}

\begin{samepage}
Az előző lépés során a MySQL telepítő rákérdezett a \verb!root! adatbázis felhasználó jelszavára, ezzel most lépjünk is be!

\begin{lstlisting}[language=bash]
mysql -u root -p
\end{lstlisting}
\end{samepage}

\begin{samepage}
A program futtatásához egy új felhasználói fiókra és egy üres adatbázisra lesz szükségünk. A nevek természetesen tetszőlegesen felcserélhetőek, a lényeg az, hogy később is az itt megadott értékeket használjuk.

\begin{lstlisting}[language=sql]
create database followikidb;
grant all on followikidb.* to followikiusr@localhost identified by 'followikipw';
\end{lstlisting}
\end{samepage}

\begin{samepage}
A Payara nem találja meg a MySQL könyvtárat azon a helyen, ahova a csomagkezelő telepítette, de egy szimbolikus link létrehozásával orvosolhatjuk a problémát.

\begin{lstlisting}[language=bash]
ln -s /usr/share/java/mysql.jar payara41/glassfish/domains/domain1/lib/mysql.jar
\end{lstlisting}
\end{samepage}

\begin{samepage}
A szervert az \verb!asadmin! programmal vezérelhetjük. Ahhoz, hogy távoli gépről is elérjük a webes management felületet előbb meg kell adni egy adminisztrátori jelszót, majd be kell kapcsolni a kötelező HTTPS használatot.

\begin{lstlisting}[language=bash]
cd payara41/bin/
./asadmin change-admin-password --domain\_name domain1
./asadmin start-domain
./asadmin enable-secure-admin
./asadmin restart-domain
\end{lstlisting}
\end{samepage}

A következő lépéseket a 4848-as porton elérhető grafikus felületen keresztül fogjuk elvégezni. Jelentkezzünk be az előbb megadott felhasználónévvel és jelszóval!

\begin{samepage}
Először létre kell hoznunk egy JDBC connection pool-t, ahogy a következő kép mutatja. Az elnevezés nem számít, a driver beállításait viszont pontosan kell megadni!

\begin{figure}[H]
\centering
\includegraphics[scale=.4]{install1}
\end{figure}
\end{samepage}

\begin{samepage}
A következő oldal alján adhatjuk meg a hozzáférési adatokat a korábban létrehozott adatbázishoz.

\begin{figure}[H]
\centering
\includegraphics[scale=.4]{install2}
\end{figure}
\end{samepage}

\begin{samepage}
A kapcsolódáshoz még egy JDBC resource-ot is létre kell hoznunk, ez viszont fontos, hogy a \verb!jdbc/followiki! nevet kapja, mert a program ez alapján azonosítja.

\begin{figure}[H]
\centering
\includegraphics[scale=.4]{install3}
\end{figure}
\end{samepage}

\begin{samepage}
Az adatbázis kapcsolat mellett az e-mail küldést is a szerveren keresztül végzi a szoftver, így tehát egy SMTP kapcsolatot is be kell állítanunk. A kép egy Gmail-es cím használatára mutat példát, de gyakorlatilag bármilyen szolgáltatással működik a funkció. Itt is fontos a \verb!mail/followiki! név használata!

\begin{figure}[H]
\centering
\includegraphics[scale=.4]{install4}
\end{figure}
\end{samepage}

\begin{samepage}
Ezzel kész is van a környezet, amiben a FolloWiki futni fog, nincs más hátra, mint letölteni és lefordítani a forráskódot. A további függőségeket már automatikusan letölti a Maven.

\begin{lstlisting}[language=bash]
git clone https://github.com/ldmnyblzs/FolloWiki.git
cd FolloWiki
mvn install
\end{lstlisting}
\end{samepage}

\begin{samepage}
A végeredmény egy \verb!.war! fájl, ezt kell a Payara-ba betölteni, és a 8080-as porton elérhetővé válik a program.

\begin{figure}[H]
\centering
\includegraphics[scale=.4]{install5}
\end{figure}
\end{samepage}

\chapter{Tesztkörnyezet}

Az egyes elemeket unit tesztelésnek vetettük alá. Ennek során vizsgáltuk például, hogy az arra hivatott komponens helyesen kezeli-e a JPA entitásokat, vagy éppen jól értelmezi-e a JSON üzeneteket.

Az egész rendszer integrációs teszteléséhez két virtuális gépet használtunk a BME Cloud-ban. Az egyiken az előző fejezetben részletezett módon futott a FolloWiki, a másikon pedig egy saját MediaWiki telepítés. Erre azért volt szükség, mert az éles Wikipédiát nem szerkeszthettük volna folyamatosan csak azért, hogy legyenek tesztadataink.

Felmerült, hogy az e-mail küldés funkcióhoz egy saját levelezőszervert is felállítunk, és minden forgalmat a belső hálózaton keresztül bonyolítunk. Ez első elgondolásra kiszámíthatóbb tesztkörnyezetnek tűnt, ám végül egy Gmail fiók is megbízhatóan el tudta látni ezt a feladatot.

\chapter{Használt eszközök}

\chapter{Összefoglalás}

\end{document}
